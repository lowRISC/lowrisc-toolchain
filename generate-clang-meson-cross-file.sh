#!/bin/bash
# Copyright lowRISC contributors.
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

## generate-gcc-meson-cross-file.sh
#
# This generates a cross file to configure meson for cross-compiling with Clang.
#
# Docs:
# - https://mesonbuild.com/Cross-compilation.html
# - https://mesonbuild.com/Machine-files.html

set -e
set -x
set -o pipefail

if ! [ "$#" -ge 2 ]; then
  echo "Usage: $0 <target> <prefix_dir> <march> <mabi> <mcmodel> <cflags...>"
  exit 2
fi;

## Take configuration from arguments
# This is the gcc target triple
toolchain_target="${1}"
# This is the directory where the toolchain has been installed.
toolchain_dest="${2}"
# -march option default value
march="${3}"
# -mabi option default value
mabi="${4}"
# -mcmodel option default value
mcmodel="${5}"
# Remaining cflags for build configurations
toolchain_cflags=("${@:6}")

# Meson uses the driver when both compiling and linking, which may need flags to
# identify exactly how to set up paths and defaults for both.
#
# The clang driver requires a `--gcc-toolchain=<path>` argument to find the
# right libraries if there are system versions of the risc-v toolchains
# installed. That is added automatically to the meson cross file constant
# `default_args`, so it doesn't need to be manually specified here.
meson_driver_flags=""
for flag in "${toolchain_cflags[@]}"; do
  if [ -z "${meson_driver_flags}" ]; then
    meson_driver_flags+="'${flag}'";
  else
    meson_driver_flags+=", '${flag}'"
  fi
done

config_dest="${toolchain_dest}/meson-${toolchain_target}-clang.txt"
sysroot_config="";
system_name=""

case "${toolchain_target}" in
  riscv*-*-linux-gnu)
    sysroot_config="sys_root = toolchain_path / '${toolchain_target}/sysroot'";
    system_name="linux";
  ;;
  riscv*-*-elf)
    system_name="bare metal";
  ;;
esac;

tee "${config_dest}" <<CONFIG
# Autogenerated by ${0} on $(date -u)
# Problems? See the bug reporting instructions in the file buildinfo.
#
# If you have relocated this toolchain, update "toolchain_path" accordingly.

[constants]
toolchain_path = '${toolchain_dest}'
toolchain_opt = '--gcc-toolchain=' + toolchain_path
march = '${march}'
mabi = '${mabi}'
mcmodel = '${mcmodel}'
default_extra_args = [${meson_driver_flags}]
default_args = [toolchain_opt, '-march=' + march, '-mabi=' + mabi, '-mcmodel=' + mcmodel] + default_extra_args
default_c_args = default_args
default_c_link_args = default_args
default_cpp_args = default_args
default_cpp_link_args = default_args

[binaries]
c = toolchain_path / 'bin/riscv32-unknown-elf-clang'
cpp = toolchain_path / 'bin/riscv32-unknown-elf-clang++'
ar = toolchain_path / 'bin/riscv32-unknown-elf-ar'
ld = toolchain_path / 'bin/riscv32-unknown-elf-ld'
c_ld = toolchain_path / 'bin/riscv32-unknown-elf-ld'
cpp_ld = toolchain_path / 'bin/riscv32-unknown-elf-ld'
objdump = toolchain_path / 'bin/riscv32-unknown-elf-objdump'
objcopy = toolchain_path / 'bin/riscv32-unknown-elf-objcopy'
strip = toolchain_path / 'bin/riscv32-unknown-elf-strip'
as = toolchain_path / 'bin/riscv32-unknown-elf-as'

[properties]
needs_exe_wrapper = true
has_function_printf = false
${sysroot_config}

[built-in options]
c_args = default_c_args
c_link_args = default_c_link_args
cpp_args = default_cpp_args
cpp_link_args = default_cpp_link_args

[host_machine]
system = '${system_name}'
cpu_family = '${toolchain_target%%-*}'
cpu = 'ibex'
endian = 'little'

CONFIG
