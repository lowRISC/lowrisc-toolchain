CT_CONFIG_VERSION="3"
CT_EXPERIMENTAL=y

CT_ARCH_RISCV=y

# CT_ARCH_ARCH controls the specific architecture that the toolchain's libraries
# are built with. It should specify the minimum RISC-V extensions that need to
# be implemented by any processor that this toolchain will compile programs for.
#
# 2020-03-26: We have added B extension (v0.92) support to the compiler using
#             experimental patches, but we still want to support Ibex without
#             the B extension, so this remains "rv32imc".
#
CT_ARCH_ARCH="rv32imc"

# CT_ARCH_ABI controls the specific ABI that the toolchain's libraries are built
# with. All programs built against this toolchain should follow exactly this
# ABI.
CT_ARCH_ABI="ilp32"

CT_TARGET_VENDOR=""
# CT_CC_GCC_LDBL_128 is not set
CT_CC_LANG_CXX=y
CT_DEBUG_GDB=y
CT_GDB_V_8_2=y
# CT_GDB_CROSS_PYTHON is not set
CT_ISL_V_0_20=y
CT_PATCH_ORDER="bundled,local"
CT_PATCH_BUNDLED_LOCAL=y
CT_PATCH_USE_LOCAL=y

# Disable progress bar for CI builds, it generates too much log output
# CT_LOG_PROGRESS_BAR is not set

# Installation prefix directory; the toolchain will end up in exactly
# this directory.
CT_PREFIX_DIR="/tools/riscv"

# Don't save tarballs for re-use (needs writable and pre-created
# CT_LOCAL_TARBALLS_DIR otherwise)
# CT_SAVE_TARBALLS is not set

# Don't chmod the CT_PREFIX_DIR read-only after the install.
# CT_PREFIX_DIR_RO is not set

# We apply the binutils bitmanip patches on top of git commit 612aac65
CT_BINUTILS_SRC_DEVEL=y
CT_BINUTILS_DEVEL_VCS_git=y
CT_BINUTILS_DEVEL_URL="https://github.com/bminor/binutils-gdb.git"
CT_BINUTILS_DEVEL_REVISION="612aac65e690387c963c34a31dd1fb138d88a45c"

# We apply the gcc bitmanip patches on top of git commit 49f75e008c0
CT_GCC_SRC_DEVEL=y
CT_GCC_DEVEL_VCS_git=y
CT_GCC_DEVEL_URL="https://github.com/riscv/riscv-gcc.git"
CT_GCC_DEVEL_REVISION="49f75e008c0809eb3c74a163297b4aa8925c9f1c"

# The build script appends a definition of CT_LOCAL_PATCH_DIR down here, that
# points to the repo's patch directory.
